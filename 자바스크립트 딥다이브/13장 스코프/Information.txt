스코프 : 모든 식별자에 대하여 자신을 참조할 수 있는 범위로써 선언된 위치에 따라 
다른 코드가 자신을 참조할 수 있는 범위가 달라진다.
또한 스코프는 식별자를 검색할 때 사용하는 규칙이라고도 할 수 있다.

스코프의 장점으로써 스코프를 통하여 범위를 달리하여 
식별자의 이름의 충돌을 방지하여 같은 이름의 식별자를 사용할 수 있다.

스코프는 네임스페이스이다.
* 네임 스페이스 : 하나의 이름 공간에서는 하나의 이름만 쓸 수 있다.

var는 같은 스코프내에서 중복선언이 가능하지만 const/let은 중복선언이 불가하다.


스코프 체인 : 함수가 중첩에 의해 계층적으로 구조를 갖는 것
스코프가 계층적으로 연결된 것

변수를 참조할 때에 자바스크립트 엔진은 자신을 참조하는 코드에서 선언된 변수에서 시작하여 
상위 스코프 방향으로 이동하며 변수를 검색한다.

상위 스코프에서 유효한 변수는 하위 스코프에서 참조할 수 있지만
하위 스코프에서 유효한 변수는 상위 스코프에서 참조할 수 없다.


함수레벨 스코프 : 
지역 = 함수 몸체 내부
함수 몸체내부에서만 지역스코프를 만들 수 있다.

* var 키워드로 선언된 변수 => 함수 레벨 스코프

블록 레벨 스코프 :
지역 = 모든 코드 블럭
함수 몸체만이 아니라 모든 코드 블록이 지역 스코프를 만듬.



동적 스코프 : 함수의 호출 위치에 따라 상위 스코프를 결정하는 것

렉시컬 스코프 (정적 스코프) : 함수의 정의 위치에 따라 상위 스코프를 결정하는 것

* 자바스크립트를 비롯한 대부분의 프로그래밍언어에서는 렉시컬 스코프를 따른다.


