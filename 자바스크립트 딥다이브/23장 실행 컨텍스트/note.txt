실행 컨텍스트는 자바스크립트의 작동 원리 핵심 개념이다.
    > 스코프를 기반으로한 식별자와 식별자에 바인딩된 값을 설명할 수 있고
    > 클로저, 렉시컬 스코프 , 호이스팅에 대해 설명할 수 있다.


실행컨텍스트가 생성되는 시점은
    > 코드가 평가될 때 생성이 된다.

실행컨텍스트의 역할은 무엇일까?
    > 스코프를 기반으로 식별자와 식별자의 바인딩된 값을 관리해준다.(렉시컬 환경)
    > 코드 실행순서를 관리해준다.(실행 컨텍스트 스택)


코드를 실행하던 중 함수호출문을 만나면 해당 실행컨택스트를 잠시 중지하고 해당 함수에 대한
함수 코드 평가가 이루어진다.


코드는 실행하기전 1. 코드평가 2. 코드 실행 과정으로 코드가 실행된다.
    > 코드 평가 과정에서 변수 선언문, 함수 선언문이 먼저 실행이 된다.
        var로 선언한 변수 선언문은 변수값이 undefiend로 초기화되고
        함수 선언문은 해당 함수 객체가 생성되어 함수 객체로 초기화된다.
        때문에 함수호출을 했을 때에 함수 호이스팅이 되는 것이다.

    > 코드 실행 과정에서는 그 외의 코드들이 순차적으로 실행이 된다.





전역 객체는 전역 코드 평가 시작되기전에 생성이 된다.


렉시컬 환경
    > 스코프를 기반으로 식별자와 식별자의 바인딩된 값을 관리해준다.
    
    > 렉시컬 환경은 환경 레코드와 외부 렉시컬 환경 참조로 이루어져있다.
        환경 레코드는 식별자와 식별자에 바인딩된 값을 관리해주고
        외부 렉시컬 환경 참조는 상위 렉시컬 환경을 참조하여 스코프 체인을 구현하게 해준다.


    > 전역 환경 레코드는 객체 환경레코드와 선언적 환경레코드로 이루어져있다.

    > 전역 객체 환경 레코드에는 전역스코프, 전역객체가 담겨져있다.
        var키워드, 함수선언문으로 선언한 식별자들은 전역 객체 환경 레코드에서
        전역객체의 프로퍼티, 메서드가 된다.

        객체 환경레코드에 전역객체 BindingObject가 바인딩이 된다. (여기서 전역객체가 생성이 되는 것이 아님.) 
        때문에 객체 환경 레코드에서 위 식별자들이 전역 객체의 프로퍼티 및 메서드가 되는 것이다.


        const, let으로 선언한 변수는 전역객체의 프로퍼티가 되지않는다. 
        const, let으로 선언한 변수는 선언적 환경레코드에 담기게 된다.

    > const , let으로 선언한 변수는 해당 선언문을 만나기 전까지 일시적 사각 지대/TMZ(Temporal Dead Zone)에 있으므로
        참조할 수 없다.
        이는 위 선언적 환경 레코드 개념과 별개의 개념임.
        함수 환경 레코드에서도 TMZ에 빠질 수 있음.

    
    > 함수 렉시컬 환경에 객체 환경 레코드에는 객체 환경 레코드와 선언적 환경레코드가 없다.

    > 만약 함수 내에서 전역객체의 빌트인 객체나 호스트 객체를 참조하려할 때는 상위 방향으로 렉시컬환경을 참조하다가
        전역 렉시컬 환경에서 참조하게 된다.

        console 식별자는 전역 객체의 프로퍼티로 존재한다.
        따라서 만약 중첩함수 내부에서 console을 썼을 때는 상위 방향으로 렉시컬 환경을 검색해나가면서
        전역 렉시컬 환경에서 console 식별자를 찾아 참조한다.


함수 객체의 [[Environment]] 라는 내부 슬롯에는 실행중인 실행컨텍스트(상위 렉시컬 환경)가 저장이 된다.
그리고 이는 외부 렉시컬 환경 참조에 바인딩이 된다.(상위 렉시컬 환경을 참조할 수 있는 이유)
    > 함수 객체가 상위 스코프를 기억할 수 있는 이유
    > 렉시컬 스코프를 구현하는 메커니즘