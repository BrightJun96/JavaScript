중요 포인트 : 
1. 지역 변수의 생명주기는 함수의 생명주기와 일치한다.

2. 호이스팅은 스코프 단위로 동작한다.

3. 전역 코드는 코드가 로드되자마자 실행된다.
전역 코드는 반환문이 없으므로 더 이상 실행할 문이 없으면 종료된다.

4. var 키워드로 선언한 전역변수는 전역 객체의 프로퍼티가 된다.

5. 전역 변숙의 생명주기는 전역 객체의 생명주기와 같다.

6. 전역 객체는 자바스크립트 엔진에 의해 어떤 객체보다 먼저 생생되는 특수한 객체이다.

7. 변수의 유효범위가 크면 클수록 코드의 가독성은 나빠지고 의도치 않게 상태가 변경될 수 있다는
위험성도 높아진다.
    a. 긴 생명주기

    b. 스코프 체인 상에서 종점에 존재

    c. 네임스페이스 오염
        여러개의 파일의 경우, 동일한 이름으로 겹칠 수 있다.


8. 변수의 스코프는 좁을수록 좋다.



전역코드는 코드가 로드되자마자 해석되고 실행된다.

전역코드에서는 반환문을 사용할 수 없기 때문에 마지막 문이 실행되어
더 이상 실행할 문이 없을 때 종료된다.

* 전역 객체
 전역 객체는 코드가 실행되기 이전 단계에 자바스크립트 엔진에 의해 어떤 객체보다도
 먼저 생성되는 특수한 객체이다.

 클라이언트 사이드 환경(브라우저)에서는 window
 서버사이드 환경(Node.js)에서는 global 객체를 의미한다.

 전역 객체는 표준 빌트인 객체(Object , String , Number, Function , Array)와
 환경에 따른 호스트 객체(클라이언트 Web API 또는 Node.js의 호스트 API),
 var 키워드로 선언한 전역 변수와 전역 함수를 프로퍼티로 갖는다.

브라우저 환경에서의 전역 객체 window는 웹 페이지를 닫기전까지 유효하다.
즉, 브라우저 환경에서 var 키워드로 정의한 전역 변수는 웹 페이지를 닫을 때까지 유효하다.

즉, var 키워드로 선언한 전역 변수의 생명 주기는 전역 객체의 생명 주기와 일치한다.