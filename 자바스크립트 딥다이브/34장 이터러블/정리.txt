
이터러블 : Symbol.iterator를 메서드로 사용하거나 프로토타입 체인을 통해 Symbol.iterator를 상속받으면
이터러블 객체이다. 이터러블 객체는 이터레이터 객체를 반환한다.

이터레이터 : 이터레이터 객체는 next()메서드를 가지며 이 메서드는 value프로퍼티와 done프로퍼티를 갖는다.
value프로퍼티는 순회중인 이터러블 객체 요소이며 done프로퍼티는 순회완료여부를 불리언으로 나타낸 값이다.  


배열, 문자열  , DOM 컬렉션은 이터러블이다.

이터러블은 for..of 문을 쓸 수 있다.

이터러블은 스프레드 문법의 대상으로 사용할 수 있다.

이터러블은 디스트럭처링 할당의 대상으로 사용할 수 있다. (구조분해를 할 수 있다.)


Symbol.iterator 메서드를 직접 구현하지 않거나 상속받지 않은 객체는 이터러블이 아니다.
따라서 for...of문을 사용할 수 없고
스프레드문법으로 사용할 수 없고  
구조분해를 사용할 수 없다.

일반 객체는 Symbol.iterator 메서드를 상속받지않기 때문에 이터러블이 아니다.
하지만 특수적으로 일반 객체도 구조분해를 할당할 수 있다.


이터레이터의 next 메서드는 이터러블의 각 요소를 순회하기 위한 포인터 역할을 한다.
next 메서드는 이터레이터 리절트 객체를 반환한다.
* 이터레이터 리절트 객체는 이터러블을 순차적으로 한 단계씩 순회하며 순회 결과를 나타낸다.

  이터레이터 리절트 객체의 value 프로퍼티는 현재 순회 중인 이터러블의 값을 나타내며
  done 프로퍼티는 이터러블의 순회 완료 여부를 나타낸다.


for..of문
> 내부적으로 next()를 호출하여 이터러블을 순회한다.
> next()가 반환한 이터레이터 리절트 객체의 value 프로퍼티 값을 for..of문의 변수에 할당한다.
> 리절트 객체의 done 프로퍼티가 false이면 계속 순회하고 true면 중단한다.



유사 배열 객체 : 마치 배열처럼 인덱스로 프로퍼티 값에 접근할 수 있고 length프로퍼티를 갖는 객체를 말한다.
> length프로퍼티를 가졌기 때문에 for문으로 순회할 수 있다.
> 인덱스를 나타내는 숫자형식의 문자열을 프로퍼티 키로 가지고 있어
인덱스로 프로퍼티 값에 접근할 수 있다.

> 이터러블이 아닌 일반 객체이므로 for..of문으로 순회할 수 없다.

> 하지만 arguments, NodeList , HTMLCollection은 유사배열객체이면서 이터러블이다.
이는 ES6에서 이들에게 Symbol.iterator를 구현하였기 때문이다.

* Array.from 메서드는 유사 배열 객체 또는 이터러블을 인수로 전달받아 배열로 변환하여 반환한다.

ES6에서 이터레이션 프로토콜을 도입한 이유는 다양한 데이터 콜렉션들이 하나의 규정을 통해 각자의 순회 방식이 아닌 
하나의 방식을 통하여 순회하도록 하기 위해서이다.
다양한 데이터 콜렉션이 이 방식으로 통합하여 전보다 효율적으로 구현할 수 있다.


사용자 정의 이터러블을 구현하기 위해서는
객체안에 Symbol.iterator를 사용하고 이 메서드 안에 반환값을 이터레이터로 만들어야한다.
이터레이터로 만드는 방법은 앞에서 봤다시피 next메서드를 사용하고 next메서드의 반환값인 객체의 프로퍼티 value,done프로퍼티를
써야한다.