7장의 중요 포인트

**중요**
암묵적 타입 변환
- true는 1로 변환될 수 있음.
- false는 0으로 변환될 수 있음.
- null은 0으로 타입 변환될 수 있음.

**중요**
논리 부정 연산자(!)는 언제나 불리언 값 반환
하지만 피연산자가 불리언이 필요는 없음
예) !0  => true  왜냐면 0은 false이기 때문에


**중요**
삼항연산식과 if문의 차이
- 삼항연산식은 값으로 사용될 수 있지만
if문은 값으로 사용될 수 없음.

** 할당문은 값으로 평가된다
    예) x = 10 => 10


> 대소 비교연산자는 불리언을 반환한다.
    예) 5 > 0 // true


단항 연산자
1. ++   부수효과O
var x = 1;
x++  => x = x + 1
x의 값을 변화 시킴.
2. --   부수효과O




위치에 따른 변화
- 피연산자 앞에 위치한 전위증/감 연산자는 먼저 피연산자의 값을 증/감 시킨후,
다른 연산을 수행

- 피연산자 뒤에 위치한 후위 증/감 연산자는 먼저 다른 연산을 수행한후, 피연산자의 값을 증/감 시킨다.


**중요**
암묵적 타입 변환
- true는 1로 변환될 수 있음.
- false는 0으로 변환될 수 있음.

var x= 2

var result = x % 2 ?"홀수":"짝수" 


**중요**
삼항연산식과 if문의 차이
- 삼항연산식은 값으로 사용될 수 있지만
if문은 값으로 사용될 수 없음.

-이유는 if문은 문이기 때문에 값처럼 사용될 수 없다
문은 값처럼 사용될 수 없다.

- 조건에 따라 어떠한 값을 반환할 때는 삼항연산식 추천

- 삼항연산식을 사용하는 것을 추천



* 부수효과
- 원래의 값을 변경하는 효과