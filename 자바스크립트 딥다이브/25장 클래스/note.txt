> 클래스는 프로토타입 기반의 객체지향 프로그래밍을 간단명료하게 나타낸 메커니즘이다.

> 클래스는 자바와 같은 클래스 기반의 객체 지향 프로그래밍 프로그래머에게 익숙함을 주는 장점이 있다.

> 클래스도 함수이다.(평가될 때 함수객체를 생성한다.)

> 클래스는 생성자 함수보다 엄격하다. 암묵적으로 strict mode가 적용되어있다.(해제 불가)

> 클래스는 let,const 키워드로 선언한 변수처럼 호이스팅이 된다.(TMZ에 빠져있음)
    클래스 선언문이전에 클래스를 참조할 수 없음.(TMZ에 빠져있음)

> 클래스는 extends, super 키워드로 상속을 지원한다.

> 클래스는 new 연산자가 없다면 에러가 발생한다.

> 클래스도 일급객체이기때문에 값처럼 쓸 수 있다.
    그러므로 1. 배열이나 객체 자료구조에 쓰일 수 있고 
            2. return 값으로 쓰일 수 있고
            3.매개변수로서도 들어갈 수 있다.
            4.또한 값처럼 쓰일 수 있기 때문에 표현식(리터럴)으로도 쓰일 수 있다.

> 클래스를 표현식으로 쓸 때에 클래스를 가리키는 객체로 생성해야함
    예) const Person = class Myclass(){}
        const me = new Myclass() => x
        const me = new Person() => o


> 클래스는 prototype을 정할 때에 클래스 몸체에 정의하며
    프로토타입 메서드는 메서드 축약표현으로 정의하고
    프로토타입 프로퍼티는 어떻게 정의하지?
    생성자함수 프로토타입 정의할 때처럼 정의한다.


> 함수 객체가 생성되는 시점(실행중인 컨텍스트에서 함수 정의가 평가되는 시점)에
  해당 함수 프로토타입도 같이 생성된다.


> 클래스는 인스턴스를 생성하는것이 유일한 존재이유이다.

> 클래스는 인스턴스의 프로퍼티,메서드를 정의하기 위해서는
    클래스의 constructor 메서드내에서 정의해야한다.

> 클래스의 constructor는 함수객체.prototype.constructor와는 다르다

> 클래스 constructor는 클래스의 메서드라기 보다 인스턴스를 생성하는 클래스의 기능이라고 생각하면 된다.
    클래스의 일부분 중 큰 부분인 것이 constructor라고 생각하면 된다.

> 클래스 constructor는 클래스내에 한개만 존재가능하다.

> constructor를 생략하면 인스턴스를 생성할 때 빈 객체를 생성하게 된다.

> constructor 내에 return 값을 쓰면 해당 반환값이 인스턴스가 된다.

* A instanceof B 는 A가 B로 만들어진 인스턴스다 라는 것을 true ,false로 반환하는 키워드이다.

> 클래스에서 정적메서드,프로퍼티를 정의하기 위해선 몸체내부에서 static 키워드 다음 메서드나 프로퍼티를 정의하면 된다.
    (객체로 정의하여 여러가지를 모아두어 정의할 수도 있다.)

> 인스턴스의 프로퍼티는 public하다. 즉, 외부에서 접근가능하다.