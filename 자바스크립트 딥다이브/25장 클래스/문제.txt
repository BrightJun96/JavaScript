클래스의 특징으로 옳지 않은 것은? => d

    a. 클래스는 함수이다.
    b. 클래스는 프로토타입 기반의 객체지향 프로그래밍을 간단명료하게 나타낸 메커니즘이다.
    c. 클래스는 let,const 키워드로 선언한 변수처럼 호이스팅이 된다.
    d. 클래스는 생성자함수와 같이 new 연산자 없이도 작동이 가능하다.


클래스는 생성자 함수와 다른점이 없다. (o , x) => x
    클래스는 생성자 함수와 비슷하게 prototype 기반 상속을 구현하고 있지만
    생성자 함수보다 엄격하며 (strict mode가 적용되있음)
    생성자 함수보다 기능이 추가되있다.

클래스는 strict mode가 적용되어 있다. (o , x)

클래스는 for...in문이나 Object.keys 메서드로 열거할 수 없다. ( o , x)

클래스는 표현식으로 정의할 수 없다. (o , x) => x

    클래스도 일급객체이기때문에 값처럼 쓸 수 있다.
    그러므로 배열이나 객체 자료구조에 쓰일 수 있고 
    return 값으로 쓰일 수 있고
    매개변수로서도 들어갈 수 있다.
    또한 값처럼 쓰일 수 있기 때문에 표현식(리터럴)으로도 쓰일 수 있다.


클래스는 인스턴스를 생성하는것이 유일한 존재이유이다. (o , x) => o


클래스의 constructor 메서드는 사실상 함수객체.prototype.constructor와 같다. (o , x) => x

    클래스의 constructor는 인스턴스의 프로퍼티와 메서드를 정의할 때가 주목적이고
    함수객체.prototype.constructor는 클래스를 가리킬 때, 즉 prototype 체인을 형성하는 것이 주목적이다.
    클래스의 constructor는 메서드로 해석되는 것이 아니라 클래스가 평가되어 생성한 함수 객체 코드의 일부가 된다.
    즉, 클래스 정의가 평가되면 constructor의 기술된 동작을 하는 함수 객체가 생성된다.

클래스의 constructor는 클래스내에 여러 개 존재할 수 있다. (o , x) => x
    constructor는 한개만 존재가능하다.

constructor 내부에 this는 인스턴스를 가리킨다. ( o ,x)

클래스의 constructor에 관하여 옳은 것은? a
    a. constructor내에서 return을 쓰면 반환값이 인스턴스 값이 된다.
    b. 클래스에서 constructor를 생략하여도 인스턴스를 생성하는데 문제가 없다
    c. constructor는 클래스의 프로토타입을 지정할 때 사용한다.
    d. constructor는 클래스를 가리키는 역할을 한다.


클래스 constructor가 아닌 몸체에서 메서드를 정의하면 클래스의 prototype메서드를 정의하는 것이다. (o,x) => o

클래스의 프로토타입 프로퍼티를 정의하기 위해서는 생성자함수와 같이 프로토타입을 정의해야한다. (o , x) => o


private 필드에 관한 설명으로 옳지 않은것은?
    a. private필드는  클래스 외부에서 접근할 수 없다.
    b. 클래스의 프로퍼티나 메서드를 private하고 싶다면 클래스 몸체에서 변수앞에 #을 붙여주면 된다. 
    c. private필드는 constructor에서가 아닌 클래스 몸체에서 정의해야한다.
    d. 클래스 몸체에 정의할 때 private 프로퍼티 앞에 this를 붙일 수 있다.


super에 관한 설명으로 옳지 않은 것은? => c
    a. sub class에서 constructor를 생략하지 않았다면 constructor 내에서 무조건 super를 호출해줘야한다. 
    b. sub class의 constructor에서 super호출전까지 this를 참조할 수 없다.
    c. super는 sub class가 아닌 클래스에서도 호출가능하다.
    d. super는 슈퍼클래스의 인수를 전달받는 역할을 한다.


super는 객체리터럴에서도 참조할 수 있다. (o , x) => o


