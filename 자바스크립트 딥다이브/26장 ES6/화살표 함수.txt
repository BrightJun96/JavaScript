> 화살표함수는 non-constructor이기 때문에
    인스턴스를 생성할 수 없고
    prototype도 생성하지 않는다.


> 화살표 함수는 함수 자체의 this, arguments, super,new.target 바인딩을 갖지 않는다.
    따라서 화살표 함수 내부에서 this,arguments, super, new.target을 참조핳면 스코프체인을 통해
    상위 스코프의 this, arguments,super,new.target을 참조한다.

> 화살표함수도 일급객체이므로 고차함수에 인수로 전달할 수 있다.


> 매개변수하나일 경우 괄호 생략가능


> 함수 몸체가 하나의 문으로 이루어져있을 경우 중괄호 생략가능


> 함수 몸체의 문이 표현식이 아닌 문일 경우 중괄호 생략 불가능
    (표현식이 아닌문은 반환할 수 없다.)

> 화살표함수의 this와 일반함수의 this는 다르게 작동한다.
  중요 : 화살표 함수의 this는 상위 스코프 중 화살표 함수가 아닌 함수의 this를 찾는다.  

    * strict mode에서 일반함수 내 this는 undefined이다.

    >> 화살표 함수는 함수 자체의 this 바인딩을 갖지 않는다.
        따라서 화살표 함수 내부에서 this를 참조하면 상위 스코프의 this를 그대로 참조한다.
        이를 lexical this라고 한다.
        이는 마치 렉시컬 스코프와 같이 화살표 함수의 this가 함수가 정의된 위치에 의해 결정된다는 것을 의미한다.

> 객체의 메서드로 화살표 함수를 사용하면 안된다.
    this가 가리키는 것이 전역객체일 수 있기 때문이다.
        예)const result = {
  x: 1,
  number: () => {
    console.log(this.x); //=> 여기서 this는 result가 아닌 전역객체인 window를 가르킴.
  },
};

    >> 즉, 메서드를 정의할 때는 메서드 축약표현이 제일 좋다.

    >> 또한, 이러한 이유로 prototype을 설정할 때에도 화살표 함수가 아닌 일반함수를 쓰는 것이 좋다.


> 화살표함수는 super를 갖지않는다. 
    따라서 this와 마찬가지로 super를 쓰면 상위 스코프의 super를 참조한다.

> 화살표함수는 함수 자체의 arguments 바인딩을 갖지 않는다.
    따라서 arguments를 참조하면 this와 마찬가지로 상위 스코프의 arguments를 참조한다.