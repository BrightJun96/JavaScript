함수 표현식과 함수 선언문은 함수의 생성시점이 다르다.

모든 선언문은 자바스크립트 엔진에 의해 먼저 실행된다.
함수 선언문도 자바스크립트 엔진에 의해 먼저 실행된다.

* 런타임 : 코드가 순차적으로 실행되는 환경

호이스팅 : 함수 선언문이 코드의 선두로 끌여 올려진 것처럼 동작하는 자바스크립트 고유의 특징

var선언 vs 함수 선언

var 참조 =>  undefined로 초기화
함수 참조 => 함수 객체로 초기화

선언은 자바스크립트 엔진에 의해 실행되지만
할당은 런타임에 의하여 실행된다.
때문에 함수를 변수에 할당하는 함수 표현식은 호이스팅이 되지 않는 것이다.
따라서 함수표현식은 변수호이스팅이 되는 것이다.
따라서 함수표현식이전에 함수를 호출하면 undefined가 호출된다.


반환문은 할수 실행을 중단하고 값을 함수외부로 전달해준다.

원시 값은 매개변수를 통해 전달하였을 때 함수 안에서 값을 변경하면 원본의 값이 변경되지 않지만
객체 값은 원본 값이 변경된다. 이것을 부수효과라고 한다.




깊은 복사 : 원본 객체를 완전히 복제하는 것


얕은 복사 : 

함수형 프로그래밍 : 
순수 함수를 통해 부수효과를 최대한 억제하여 오류를 피하고 프로그램의 안정성을 높이려는 프로그래밍 패러다임


콜백 함수는 고차 함수에 의해 호출되기 때문에 
고차함수의 매개변수에 콜백함수를 전달할 때에 
콜백함수를 호출하지 않고 함수 자체를 전달해야한다.


Q.
그렇다면 함수도 객체이니깐
고차함수내에서 콜백함수를 변경하면 기존 콜백함수가 변경되는 것인가?