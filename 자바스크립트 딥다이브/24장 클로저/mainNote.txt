
클로저 : 중첩함수가 상위 스코프의 식별자를 참조하고 있고 중첩함수가 외부함수보다 더 오래 생존해있는 경우에 
    한정하는 것이 일반적이다.



클로저의 핵심 원리는 상위 렉시컬 환경을 참조할 수 있다는데에 있다는 것이다.

함수 객체가 생성될 때에 내부 슬롯[[Environment]]에는 현재 실행중인 실행 컨텍스트 렉시컬 환경이 저장이 된다.
또한 해당 렉시컬 환경은 함수 객체가 평가될 때에 외부 렉시컬 환경 참조에 바인딩이 된다.

이러한 이유로 함수가 렉시컬 스코프인 것 즉 함수가 정의됬을 때 기준으로 상위 스코프를 정하는 것이다.
(함수가 정의될 때는 상위 실행컨텍스트가 평가하여 해당 함수 객체를 생성할 때이기 때문)

클로저의 조건:
            중첩함수의 생명주기 > 외부함수의 생명주기


    > 중첩함수가 외부함수의 변수를 참조하고 있을 때 
        (이 때 외부함수의 변수를 자유 변수라하며 
        중첩함수보다 상위스코프인 외부함수의 변수가 
        중첩함수에 갇혀있다하여 클로저라고 하는 것이다.)

    > 외부함수보다 중첩함수의 생존주기가 더 길 때
        
        중첩함수의 생존주기가 더 긴 경우
            - 외부함수가 중첩함수를 리턴하고 있을 때

            - 외부에서 중첩함수를 참조하고 있을 때






일반적으로 클로저가 아닌 경우
    > 중첩함수가 외부함수의 변수를 참조하고 있지만 외부에서 외부함수를 참조하고 있지 않을 때

    > 중첩함수가 외부함수의 변수를 참조하고 있지 않을 때

    > 외부함수가 중첩함수를 return하고 있지 않을 때